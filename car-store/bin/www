#!/usr/bin/env node

var mongoose = require('mongoose');
var child_process =  require('child_process');

function mongooseConnect(){
  mongoose.connect('mongodb://localhost/car-store');  
};

mongoose.connection.on('connected', startApp);
mongoose.connection.on('error', (error)=>{
    
  var mongo_promise = new Promise((done)=>{
    var mongo = child_process.spawn('mongo/bin/mongod', ['--dbpath', 'mongo/data']);
    mongo.stdout.on("data", (chunk)=>{
      var out = new String(chunk).replace('\\r\\r\\n', '\r\r\n');

      if(out.indexOf('waiting for connections on port')==-1) return;
      
      console.log('mongodb has started!');
      done();
    });
  })
  .then(mongooseConnect);

});

mongooseConnect();
  


function startApp(){

  /**
   * Module dependencies.
   */
  
  var app = require('../app');
  var debug = require('debug')('node-angular-mongo:server');
  var http = require('http');

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);    

  //update package version
  //var npm = child_process.execSync('npm version prerelease');
  // var pjson = require('../package.json');
  // console.log(pjson.version)


  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }

}



